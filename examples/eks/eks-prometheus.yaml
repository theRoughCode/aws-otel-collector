# create namespace
apiVersion: v1
kind: Namespace
metadata:
  name: aws-otel-eks
  labels:
    name: aws-otel-eks

---

# create collector service account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: collector
  namespace: aws-otel-eks

---

# create cluster role for collector
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: collector-role
rules:
  - apiGroups: [""]
    resources:
    - nodes
    - nodes/proxy
    - services
    - endpoints
    - pods
    verbs: ["get", "list", "watch"]
  - apiGroups:
    - extensions
    resources:
    - ingresses
    verbs: ["get", "list", "watch"]
  - nonResourceURLs: ["/metrics"]
    verbs: ["get"]

---

# create role binding for AOC
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: collector-role-binding
subjects:
  - kind: ServiceAccount
    name: collector
    namespace: aws-otel-eks
roleRef:
  kind: ClusterRole
  name: collector-role
  apiGroup: rbac.authorization.k8s.io

---

# create collector deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: collector
  namespace: aws-otel-eks
spec:
  replicas: 1
  selector:
    matchLabels:
      app: collector
  template:
    metadata:
      labels:
        app: collector
    spec:
      containers:
        - name: aoc-collector
          image: kohrapha/awscollector:v0.2.0
          imagePullPolicy: Always
          command: ["/awscollector"]
          args: ["--config=/etc/otel-config.yaml", "--log-level=DEBUG"]
          resources:
            limits:
              cpu:  1000m
              memory: 1000Mi
            requests:
              cpu: 200m
              memory: 200Mi
      terminationGracePeriodSeconds: 60
      serviceAccountName: collector

---

# Create traffic generation service
apiVersion: v1
kind: Service
metadata:
  name: prom-app-service
  namespace: aws-otel-eks
  labels:
    app: prom-app
spec:
  ports:
  - name: web
    port: 8081
    targetPort: 8081
    protocol: TCP
  selector:
    app: prom-app
  type: NodePort

---

# create traffic generator deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prom-app
  namespace: aws-otel-eks
spec:
  replicas: 10
  selector:
    matchLabels:
      app: prom-app
  template:
    metadata:
      labels:
        app: prom-app
    spec:
      containers:
        - name: traffic-generator
          image: supergiantkir/prometheus-test-app:latest
          imagePullPolicy: Always
